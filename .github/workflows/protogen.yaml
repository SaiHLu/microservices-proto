name: "Protocol Buffer Go Stubs Generation"
on:
  workflow_dispatch:
permissions: 
  contents: write
jobs:
  protoc:
    name: "Generate"
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install protoc and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.32.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Generate protobuf files
        run: |
          # Create output directory
          mkdir -p golang
          protoc --go_out=./golang --go_opt=paths=source_relative --go-grpc_out=./golang --go-grpc_opt=paths=source_relative ./**/*.proto
      - name: Execute version.go
        id: version
        run: |
          # run the version.go script
          go run version.go
          VERSION=$(cat version.txt)
          echo "Updated version to: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      - name: Commit and push
        run: |
          git config --global user.email "saisailuhlaing@gmail.com"
          git config --global user.name "SaiHLu"

          # Get current branch name
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch is: $CURRENT_BRANCH"

          # Add all changes including the version.txt file
          git add .

          # Commit with version in message
          git commit -m "Generated protobuf files for all services [version: ${{ steps.version.outputs.version }}]"

          # Push to main branch
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/SaiHLu/microservices-proto.git
          git push origin $CURRENT_BRANCH

          # Create and push tag with the new version
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}
